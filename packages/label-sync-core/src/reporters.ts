import chalk from 'chalk'
import * as os from 'os'
import {
  SyncReport,
  RepositorySyncSuccessReport,
  RepositorySyncErrorReport,
} from './handlers'
import { GithubLabel } from './labels'

/**
 *
 * Generates human readable sync report.
 *
 * @param reports
 */
export function generateSyncReport(report: SyncReport) {
  const message = `
${chalk.bold('Github Labels Report')}
${chalk.gray('This is an autogenerated report for your project.')}

Hey ðŸ‘‹ we ran sync and this came out:

${chalk.bold.bgRed('Problems')}

${generateRepositorySyncErrorsReport(report.errors)}

${chalk.bold.bgGreen('Changes')}

${generateRepositorySyncSuccessesReport(report.successes)}
      `

  return message

  /**
   * Helper functions
   */
  function generateRepositorySyncSuccessesReport(
    reports: RepositorySyncSuccessReport[],
  ): string {
    if (reports.length === 0) {
      return `No successful sync reports.`
    }

    return `
Successfully synced labels accross ${reports.length} repositories;
${reports.map(generateRepositorySyncSuccessReport).join(os.EOL)}
    `
  }

  function generateRepositorySyncErrorsReport(
    reports: RepositorySyncErrorReport[],
  ): string {
    if (reports.length === 0) {
      return `Everything looks fine.`
    }

    return `
There were some issues with ${reports.length} repositories;
${reports.map(generateRepositorySyncErrorReport).join(os.EOL)}
    `
  }

  function generateRepositorySyncSuccessReport(
    successReport: RepositorySyncSuccessReport,
  ): string {
    const message = `
Synced ${chalk.cyan(successReport.name)}:
${generateLabelsSyncReport({ action: 'add', labels: successReport.additions })}
${generateLabelsSyncReport({ action: 'update', labels: successReport.updates })}
${generateLabelsSyncReport({
      action: 'remove',
      labels: successReport.removals,
      strict: successReport.config.strict!,
    })}
    `

    return message
  }

  function generateRepositorySyncErrorReport(
    report: RepositorySyncErrorReport,
  ): string {
    const message = `
Couldn't sync ${chalk.bgYellow(report.name)}:

${report.message}

### Configuration
${codeBlock(JSON.stringify(report.config, null, 2), 'json')}
    `
    return message
  }

  function generateLabelsSyncReport(
    options:
      | { action: 'add'; labels: GithubLabel[] }
      | { action: 'update'; labels: GithubLabel[] }
      | { action: 'remove'; labels: GithubLabel[]; strict: boolean },
  ) {
    switch (options.action) {
      case 'add': {
        if (options.labels.length === 0) {
          return `No new labels.`
        }

        return `
Added ${options.labels.length} labels:
${options.labels.map(generateLabelSyncReport).join(os.EOL)}
        `
      }

      case 'update': {
        if (options.labels.length === 0) {
          return `No labels updated.`
        }

        return `
Updated ${options.labels.length} labels:
${options.labels.map(generateLabelSyncReport).join(os.EOL)}
        `
      }

      case 'remove': {
        if (options.labels.length === 0) {
          return `No labels removed.`
        }

        if (options.strict) {
          return `
Removed ${options.labels.length} labels:
${options.labels.map(generateLabelSyncReport).join(os.EOL)}
                  `
        } else {
          return `
${options.labels.length} labels should be removed;
${options.labels.map(generateLabelSyncReport).join(os.EOL)}

To remove them, set ${chalk.bgBlueBright('strict')} property to true.
    `
        }
      }
    }
  }

  function generateLabelSyncReport(label: GithubLabel): string {
    if (label.description === '') {
      return ` \u002D ${chalk.hex(label.color)(label.name)}`
    }
    return (
      ` \u002D ${chalk.hex(label.color)(label.name)}` +
      `${os.EOL}     ${chalk.gray(label.description)}`
    )
  }

  /**
   * Utils
   */
  function codeBlock(code: string, language: string): string {
    return '```' + language + os.EOL + code + '```'
  }
}
