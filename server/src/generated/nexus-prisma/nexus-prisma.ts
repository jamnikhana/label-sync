/**
 * This file was automatically generated by nexus-prisma@0.3.4
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Organisation: OrganisationObject
      OrganisationConnection: OrganisationConnectionObject
      OrganisationEdge: OrganisationEdgeObject
      AggregateOrganisation: AggregateOrganisationObject
      Repository: RepositoryObject
      Label: LabelObject
      RepositoryConnection: RepositoryConnectionObject
      RepositoryEdge: RepositoryEdgeObject
      AggregateRepository: AggregateRepositoryObject
      LabelConnection: LabelConnectionObject
      LabelEdge: LabelEdgeObject
      AggregateLabel: AggregateLabelObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      OrganisationSubscriptionPayload: OrganisationSubscriptionPayloadObject
      OrganisationPreviousValues: OrganisationPreviousValuesObject
      RepositorySubscriptionPayload: RepositorySubscriptionPayloadObject
      RepositoryPreviousValues: RepositoryPreviousValuesObject
      LabelSubscriptionPayload: LabelSubscriptionPayloadObject
      LabelPreviousValues: LabelPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Organisation: OrganisationFieldDetails
      OrganisationConnection: OrganisationConnectionFieldDetails
      OrganisationEdge: OrganisationEdgeFieldDetails
      AggregateOrganisation: AggregateOrganisationFieldDetails
      Repository: RepositoryFieldDetails
      Label: LabelFieldDetails
      RepositoryConnection: RepositoryConnectionFieldDetails
      RepositoryEdge: RepositoryEdgeFieldDetails
      AggregateRepository: AggregateRepositoryFieldDetails
      LabelConnection: LabelConnectionFieldDetails
      LabelEdge: LabelEdgeFieldDetails
      AggregateLabel: AggregateLabelFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      OrganisationSubscriptionPayload: OrganisationSubscriptionPayloadFieldDetails
      OrganisationPreviousValues: OrganisationPreviousValuesFieldDetails
      RepositorySubscriptionPayload: RepositorySubscriptionPayloadFieldDetails
      RepositoryPreviousValues: RepositoryPreviousValuesFieldDetails
      LabelSubscriptionPayload: LabelSubscriptionPayloadFieldDetails
      LabelPreviousValues: LabelPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      OrganisationWhereUniqueInput: OrganisationWhereUniqueInputInputObject
      OrganisationWhereInput: OrganisationWhereInputInputObject
      RepositoryWhereUniqueInput: RepositoryWhereUniqueInputInputObject
      LabelWhereInput: LabelWhereInputInputObject
      RepositoryWhereInput: RepositoryWhereInputInputObject
      LabelWhereUniqueInput: LabelWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      OrganisationCreateInput: OrganisationCreateInputInputObject
      OrganisationUpdateInput: OrganisationUpdateInputInputObject
      OrganisationUpdateManyMutationInput: OrganisationUpdateManyMutationInputInputObject
      RepositoryCreateInput: RepositoryCreateInputInputObject
      LabelCreateManyInput: LabelCreateManyInputInputObject
      LabelCreateInput: LabelCreateInputInputObject
      RepositoryUpdateInput: RepositoryUpdateInputInputObject
      LabelUpdateManyInput: LabelUpdateManyInputInputObject
      LabelUpdateWithWhereUniqueNestedInput: LabelUpdateWithWhereUniqueNestedInputInputObject
      LabelUpdateDataInput: LabelUpdateDataInputInputObject
      LabelUpsertWithWhereUniqueNestedInput: LabelUpsertWithWhereUniqueNestedInputInputObject
      LabelScalarWhereInput: LabelScalarWhereInputInputObject
      LabelUpdateManyWithWhereNestedInput: LabelUpdateManyWithWhereNestedInputInputObject
      LabelUpdateManyDataInput: LabelUpdateManyDataInputInputObject
      RepositoryUpdateManyMutationInput: RepositoryUpdateManyMutationInputInputObject
      LabelUpdateInput: LabelUpdateInputInputObject
      LabelUpdateManyMutationInput: LabelUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      OrganisationSubscriptionWhereInput: OrganisationSubscriptionWhereInputInputObject
      RepositorySubscriptionWhereInput: RepositorySubscriptionWhereInputInputObject
      LabelSubscriptionWhereInput: LabelSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues
    BillingPlan: BillingPlanValues
    OrganisationOrderByInput: OrganisationOrderByInputValues
    LabelOrderByInput: LabelOrderByInputValues
    RepositoryOrderByInput: RepositoryOrderByInputValues
    MutationType: MutationTypeValues
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user'; args?: QueryUserArgs[] | false; alias?: string }
  | { name: 'users'; args?: QueryUsersArgs[] | false; alias?: string }
  | {
      name: 'usersConnection'
      args?: QueryUsersConnectionArgs[] | false
      alias?: string
    }
  | {
      name: 'organisation'
      args?: QueryOrganisationArgs[] | false
      alias?: string
    }
  | {
      name: 'organisations'
      args?: QueryOrganisationsArgs[] | false
      alias?: string
    }
  | {
      name: 'organisationsConnection'
      args?: QueryOrganisationsConnectionArgs[] | false
      alias?: string
    }
  | { name: 'repository'; args?: QueryRepositoryArgs[] | false; alias?: string }
  | {
      name: 'repositories'
      args?: QueryRepositoriesArgs[] | false
      alias?: string
    }
  | {
      name: 'repositoriesConnection'
      args?: QueryRepositoriesConnectionArgs[] | false
      alias?: string
    }
  | { name: 'label'; args?: QueryLabelArgs[] | false; alias?: string }
  | { name: 'labels'; args?: QueryLabelsArgs[] | false; alias?: string }
  | {
      name: 'labelsConnection'
      args?: QueryLabelsConnectionArgs[] | false
      alias?: string
    }

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'organisation'
  | 'organisations'
  | 'organisationsConnection'
  | 'repository'
  | 'repositories'
  | 'repositoriesConnection'
  | 'label'
  | 'labels'
  | 'labelsConnection'

type QueryUserArgs = 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrganisationArgs = 'where'
type QueryOrganisationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrganisationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRepositoryArgs = 'where'
type QueryRepositoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRepositoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLabelArgs = 'where'
type QueryLabelsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLabelsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Query'>,
      args: { where: UserWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'Query'>,
      args: {
        where?: UserWhereInput | null
        orderBy?: prisma.UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Query'>,
      args: {
        where?: UserWhereInput | null
        orderBy?: prisma.UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  organisation: {
    type: 'Organisation'
    args: Record<QueryOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Query'>,
      args: { where: OrganisationWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Organisation | null> | prisma.Organisation | null
  }
  organisations: {
    type: 'Organisation'
    args: Record<QueryOrganisationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'Query'>,
      args: {
        where?: OrganisationWhereInput | null
        orderBy?: prisma.OrganisationOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Organisation[]> | prisma.Organisation[]
  }
  organisationsConnection: {
    type: 'OrganisationConnection'
    args: Record<QueryOrganisationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Query'>,
      args: {
        where?: OrganisationWhereInput | null
        orderBy?: prisma.OrganisationOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.OrganisationConnection> | prisma.OrganisationConnection
  }
  repository: {
    type: 'Repository'
    args: Record<QueryRepositoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Query'>,
      args: { where: RepositoryWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Repository | null> | prisma.Repository | null
  }
  repositories: {
    type: 'Repository'
    args: Record<QueryRepositoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'Query'>,
      args: {
        where?: RepositoryWhereInput | null
        orderBy?: prisma.RepositoryOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Repository[]> | prisma.Repository[]
  }
  repositoriesConnection: {
    type: 'RepositoryConnection'
    args: Record<QueryRepositoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Query'>,
      args: {
        where?: RepositoryWhereInput | null
        orderBy?: prisma.RepositoryOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.RepositoryConnection> | prisma.RepositoryConnection
  }
  label: {
    type: 'Label'
    args: Record<QueryLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Query'>,
      args: { where: LabelWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label | null> | prisma.Label | null
  }
  labels: {
    type: 'Label'
    args: Record<QueryLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'Query'>,
      args: {
        where?: LabelWhereInput | null
        orderBy?: prisma.LabelOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label[]> | prisma.Label[]
  }
  labelsConnection: {
    type: 'LabelConnection'
    args: Record<QueryLabelsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Query'>,
      args: {
        where?: LabelWhereInput | null
        orderBy?: prisma.LabelOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.LabelConnection> | prisma.LabelConnection
  }
}

// Types for User

type UserObject =
  | UserFields
  | { name: 'id'; args?: [] | false; alias?: string }
  | { name: 'githubUserId'; args?: [] | false; alias?: string }

type UserFields = 'id' | 'githubUserId'

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  githubUserId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo'; args?: [] | false; alias?: string }
  | { name: 'edges'; args?: [] | false; alias?: string }
  | { name: 'aggregate'; args?: [] | false; alias?: string }

type UserConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'UserConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'UserConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'UserConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage'; args?: [] | false; alias?: string }
  | { name: 'hasPreviousPage'; args?: [] | false; alias?: string }
  | { name: 'startCursor'; args?: [] | false; alias?: string }
  | { name: 'endCursor'; args?: [] | false; alias?: string }

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node'; args?: [] | false; alias?: string }
  | { name: 'cursor'; args?: [] | false; alias?: string }

type UserEdgeFields = 'node' | 'cursor'

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'UserEdge'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count'; args?: [] | false; alias?: string }

type AggregateUserFields = 'count'

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for Organisation

type OrganisationObject =
  | OrganisationFields
  | { name: 'id'; args?: [] | false; alias?: string }
  | { name: 'billingPlan'; args?: [] | false; alias?: string }

type OrganisationFields = 'id' | 'billingPlan'

export interface OrganisationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  billingPlan: {
    type: 'BillingPlan'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Organisation'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BillingPlan> | prisma.BillingPlan
  }
}

// Types for OrganisationConnection

type OrganisationConnectionObject =
  | OrganisationConnectionFields
  | { name: 'pageInfo'; args?: [] | false; alias?: string }
  | { name: 'edges'; args?: [] | false; alias?: string }
  | { name: 'aggregate'; args?: [] | false; alias?: string }

type OrganisationConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface OrganisationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'OrganisationConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OrganisationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'OrganisationConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.OrganisationEdge[]> | prisma.OrganisationEdge[]
  }
  aggregate: {
    type: 'AggregateOrganisation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'OrganisationConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.AggregateOrganisation> | prisma.AggregateOrganisation
  }
}

// Types for OrganisationEdge

type OrganisationEdgeObject =
  | OrganisationEdgeFields
  | { name: 'node'; args?: [] | false; alias?: string }
  | { name: 'cursor'; args?: [] | false; alias?: string }

type OrganisationEdgeFields = 'node' | 'cursor'

export interface OrganisationEdgeFieldDetails {
  node: {
    type: 'Organisation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'OrganisationEdge'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Organisation> | prisma.Organisation
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for AggregateOrganisation

type AggregateOrganisationObject =
  | AggregateOrganisationFields
  | { name: 'count'; args?: [] | false; alias?: string }

type AggregateOrganisationFields = 'count'

export interface AggregateOrganisationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for Repository

type RepositoryObject =
  | RepositoryFields
  | { name: 'id'; args?: [] | false; alias?: string }
  | { name: 'name'; args?: [] | false; alias?: string }
  | { name: 'owner'; args?: [] | false; alias?: string }
  | { name: 'labels'; args?: RepositoryLabelsArgs[] | false; alias?: string }

type RepositoryFields = 'id' | 'name' | 'owner' | 'labels'

type RepositoryLabelsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'

export interface RepositoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  labels: {
    type: 'Label'
    args: Record<RepositoryLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'Repository'>,
      args: {
        where?: LabelWhereInput | null
        orderBy?: prisma.LabelOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label[]> | prisma.Label[]
  }
}

// Types for Label

type LabelObject =
  | LabelFields
  | { name: 'id'; args?: [] | false; alias?: string }
  | { name: 'githubId'; args?: [] | false; alias?: string }
  | { name: 'name'; args?: [] | false; alias?: string }
  | { name: 'color'; args?: [] | false; alias?: string }
  | { name: 'description'; args?: [] | false; alias?: string }

type LabelFields = 'id' | 'githubId' | 'name' | 'color' | 'description'

export interface LabelFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  githubId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}

// Types for RepositoryConnection

type RepositoryConnectionObject =
  | RepositoryConnectionFields
  | { name: 'pageInfo'; args?: [] | false; alias?: string }
  | { name: 'edges'; args?: [] | false; alias?: string }
  | { name: 'aggregate'; args?: [] | false; alias?: string }

type RepositoryConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface RepositoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'RepositoryConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RepositoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'RepositoryConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.RepositoryEdge[]> | prisma.RepositoryEdge[]
  }
  aggregate: {
    type: 'AggregateRepository'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'RepositoryConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.AggregateRepository> | prisma.AggregateRepository
  }
}

// Types for RepositoryEdge

type RepositoryEdgeObject =
  | RepositoryEdgeFields
  | { name: 'node'; args?: [] | false; alias?: string }
  | { name: 'cursor'; args?: [] | false; alias?: string }

type RepositoryEdgeFields = 'node' | 'cursor'

export interface RepositoryEdgeFieldDetails {
  node: {
    type: 'Repository'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'RepositoryEdge'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Repository> | prisma.Repository
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for AggregateRepository

type AggregateRepositoryObject =
  | AggregateRepositoryFields
  | { name: 'count'; args?: [] | false; alias?: string }

type AggregateRepositoryFields = 'count'

export interface AggregateRepositoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for LabelConnection

type LabelConnectionObject =
  | LabelConnectionFields
  | { name: 'pageInfo'; args?: [] | false; alias?: string }
  | { name: 'edges'; args?: [] | false; alias?: string }
  | { name: 'aggregate'; args?: [] | false; alias?: string }

type LabelConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface LabelConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'LabelConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LabelEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<'LabelConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.LabelEdge[]> | prisma.LabelEdge[]
  }
  aggregate: {
    type: 'AggregateLabel'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'LabelConnection'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.AggregateLabel> | prisma.AggregateLabel
  }
}

// Types for LabelEdge

type LabelEdgeObject =
  | LabelEdgeFields
  | { name: 'node'; args?: [] | false; alias?: string }
  | { name: 'cursor'; args?: [] | false; alias?: string }

type LabelEdgeFields = 'node' | 'cursor'

export interface LabelEdgeFieldDetails {
  node: {
    type: 'Label'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'LabelEdge'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label> | prisma.Label
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for AggregateLabel

type AggregateLabelObject =
  | AggregateLabelFields
  | { name: 'count'; args?: [] | false; alias?: string }

type AggregateLabelFields = 'count'

export interface AggregateLabelFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for Mutation

type MutationObject =
  | MutationFields
  | {
      name: 'createUser'
      args?: MutationCreateUserArgs[] | false
      alias?: string
    }
  | {
      name: 'updateUser'
      args?: MutationUpdateUserArgs[] | false
      alias?: string
    }
  | {
      name: 'updateManyUsers'
      args?: MutationUpdateManyUsersArgs[] | false
      alias?: string
    }
  | {
      name: 'upsertUser'
      args?: MutationUpsertUserArgs[] | false
      alias?: string
    }
  | {
      name: 'deleteUser'
      args?: MutationDeleteUserArgs[] | false
      alias?: string
    }
  | {
      name: 'deleteManyUsers'
      args?: MutationDeleteManyUsersArgs[] | false
      alias?: string
    }
  | {
      name: 'createOrganisation'
      args?: MutationCreateOrganisationArgs[] | false
      alias?: string
    }
  | {
      name: 'updateOrganisation'
      args?: MutationUpdateOrganisationArgs[] | false
      alias?: string
    }
  | {
      name: 'updateManyOrganisations'
      args?: MutationUpdateManyOrganisationsArgs[] | false
      alias?: string
    }
  | {
      name: 'upsertOrganisation'
      args?: MutationUpsertOrganisationArgs[] | false
      alias?: string
    }
  | {
      name: 'deleteOrganisation'
      args?: MutationDeleteOrganisationArgs[] | false
      alias?: string
    }
  | {
      name: 'deleteManyOrganisations'
      args?: MutationDeleteManyOrganisationsArgs[] | false
      alias?: string
    }
  | {
      name: 'createRepository'
      args?: MutationCreateRepositoryArgs[] | false
      alias?: string
    }
  | {
      name: 'updateRepository'
      args?: MutationUpdateRepositoryArgs[] | false
      alias?: string
    }
  | {
      name: 'updateManyRepositories'
      args?: MutationUpdateManyRepositoriesArgs[] | false
      alias?: string
    }
  | {
      name: 'upsertRepository'
      args?: MutationUpsertRepositoryArgs[] | false
      alias?: string
    }
  | {
      name: 'deleteRepository'
      args?: MutationDeleteRepositoryArgs[] | false
      alias?: string
    }
  | {
      name: 'deleteManyRepositories'
      args?: MutationDeleteManyRepositoriesArgs[] | false
      alias?: string
    }
  | {
      name: 'createLabel'
      args?: MutationCreateLabelArgs[] | false
      alias?: string
    }
  | {
      name: 'updateLabel'
      args?: MutationUpdateLabelArgs[] | false
      alias?: string
    }
  | {
      name: 'updateManyLabels'
      args?: MutationUpdateManyLabelsArgs[] | false
      alias?: string
    }
  | {
      name: 'upsertLabel'
      args?: MutationUpsertLabelArgs[] | false
      alias?: string
    }
  | {
      name: 'deleteLabel'
      args?: MutationDeleteLabelArgs[] | false
      alias?: string
    }
  | {
      name: 'deleteManyLabels'
      args?: MutationDeleteManyLabelsArgs[] | false
      alias?: string
    }

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createOrganisation'
  | 'updateOrganisation'
  | 'updateManyOrganisations'
  | 'upsertOrganisation'
  | 'deleteOrganisation'
  | 'deleteManyOrganisations'
  | 'createRepository'
  | 'updateRepository'
  | 'updateManyRepositories'
  | 'upsertRepository'
  | 'deleteRepository'
  | 'deleteManyRepositories'
  | 'createLabel'
  | 'updateLabel'
  | 'updateManyLabels'
  | 'upsertLabel'
  | 'deleteLabel'
  | 'deleteManyLabels'

type MutationCreateUserArgs = 'data'
type MutationUpdateUserArgs = 'data' | 'where'
type MutationUpdateManyUsersArgs = 'data' | 'where'
type MutationUpsertUserArgs = 'where' | 'create' | 'update'
type MutationDeleteUserArgs = 'where'
type MutationDeleteManyUsersArgs = 'where'
type MutationCreateOrganisationArgs = 'data'
type MutationUpdateOrganisationArgs = 'data' | 'where'
type MutationUpdateManyOrganisationsArgs = 'data' | 'where'
type MutationUpsertOrganisationArgs = 'where' | 'create' | 'update'
type MutationDeleteOrganisationArgs = 'where'
type MutationDeleteManyOrganisationsArgs = 'where'
type MutationCreateRepositoryArgs = 'data'
type MutationUpdateRepositoryArgs = 'data' | 'where'
type MutationUpdateManyRepositoriesArgs = 'data' | 'where'
type MutationUpsertRepositoryArgs = 'where' | 'create' | 'update'
type MutationDeleteRepositoryArgs = 'where'
type MutationDeleteManyRepositoriesArgs = 'where'
type MutationCreateLabelArgs = 'data'
type MutationUpdateLabelArgs = 'data' | 'where'
type MutationUpdateManyLabelsArgs = 'data' | 'where'
type MutationUpsertLabelArgs = 'where' | 'create' | 'update'
type MutationDeleteLabelArgs = 'where'
type MutationDeleteManyLabelsArgs = 'where'

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { data: UserCreateInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { data: UserUpdateInput; where: UserWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        data: UserUpdateManyMutationInput
        where?: UserWhereInput | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        where: UserWhereUniqueInput
        create: UserCreateInput
        update: UserUpdateInput
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { where: UserWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { where?: UserWhereInput | null },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOrganisation: {
    type: 'Organisation'
    args: Record<MutationCreateOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { data: OrganisationCreateInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Organisation> | prisma.Organisation
  }
  updateOrganisation: {
    type: 'Organisation'
    args: Record<MutationUpdateOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        data: OrganisationUpdateInput
        where: OrganisationWhereUniqueInput
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Organisation | null> | prisma.Organisation | null
  }
  updateManyOrganisations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOrganisationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        data: OrganisationUpdateManyMutationInput
        where?: OrganisationWhereInput | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOrganisation: {
    type: 'Organisation'
    args: Record<MutationUpsertOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        where: OrganisationWhereUniqueInput
        create: OrganisationCreateInput
        update: OrganisationUpdateInput
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Organisation> | prisma.Organisation
  }
  deleteOrganisation: {
    type: 'Organisation'
    args: Record<MutationDeleteOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { where: OrganisationWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Organisation | null> | prisma.Organisation | null
  }
  deleteManyOrganisations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOrganisationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { where?: OrganisationWhereInput | null },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRepository: {
    type: 'Repository'
    args: Record<MutationCreateRepositoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { data: RepositoryCreateInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Repository> | prisma.Repository
  }
  updateRepository: {
    type: 'Repository'
    args: Record<MutationUpdateRepositoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { data: RepositoryUpdateInput; where: RepositoryWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Repository | null> | prisma.Repository | null
  }
  updateManyRepositories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRepositoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        data: RepositoryUpdateManyMutationInput
        where?: RepositoryWhereInput | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRepository: {
    type: 'Repository'
    args: Record<MutationUpsertRepositoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        where: RepositoryWhereUniqueInput
        create: RepositoryCreateInput
        update: RepositoryUpdateInput
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Repository> | prisma.Repository
  }
  deleteRepository: {
    type: 'Repository'
    args: Record<MutationDeleteRepositoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { where: RepositoryWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Repository | null> | prisma.Repository | null
  }
  deleteManyRepositories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRepositoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { where?: RepositoryWhereInput | null },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLabel: {
    type: 'Label'
    args: Record<MutationCreateLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { data: LabelCreateInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label> | prisma.Label
  }
  updateLabel: {
    type: 'Label'
    args: Record<MutationUpdateLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { data: LabelUpdateInput; where: LabelWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label | null> | prisma.Label | null
  }
  updateManyLabels: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        data: LabelUpdateManyMutationInput
        where?: LabelWhereInput | null
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLabel: {
    type: 'Label'
    args: Record<MutationUpsertLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: {
        where: LabelWhereUniqueInput
        create: LabelCreateInput
        update: LabelUpdateInput
      },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label> | prisma.Label
  }
  deleteLabel: {
    type: 'Label'
    args: Record<MutationDeleteLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { where: LabelWhereUniqueInput },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label | null> | prisma.Label | null
  }
  deleteManyLabels: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'Mutation'>,
      args: { where?: LabelWhereInput | null },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count'; args?: [] | false; alias?: string }

type BatchPayloadFields = 'count'

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user'; args?: SubscriptionUserArgs[] | false; alias?: string }
  | {
      name: 'organisation'
      args?: SubscriptionOrganisationArgs[] | false
      alias?: string
    }
  | {
      name: 'repository'
      args?: SubscriptionRepositoryArgs[] | false
      alias?: string
    }
  | { name: 'label'; args?: SubscriptionLabelArgs[] | false; alias?: string }

type SubscriptionFields = 'user' | 'organisation' | 'repository' | 'label'

type SubscriptionUserArgs = 'where'
type SubscriptionOrganisationArgs = 'where'
type SubscriptionRepositoryArgs = 'where'
type SubscriptionLabelArgs = 'where'

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Subscription'>,
      args: { where?: UserSubscriptionWhereInput | null },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) =>
      | Promise<prisma.UserSubscriptionPayload | null>
      | prisma.UserSubscriptionPayload
      | null
  }
  organisation: {
    type: 'OrganisationSubscriptionPayload'
    args: Record<SubscriptionOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Subscription'>,
      args: { where?: OrganisationSubscriptionWhereInput | null },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) =>
      | Promise<prisma.OrganisationSubscriptionPayload | null>
      | prisma.OrganisationSubscriptionPayload
      | null
  }
  repository: {
    type: 'RepositorySubscriptionPayload'
    args: Record<SubscriptionRepositoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Subscription'>,
      args: { where?: RepositorySubscriptionWhereInput | null },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) =>
      | Promise<prisma.RepositorySubscriptionPayload | null>
      | prisma.RepositorySubscriptionPayload
      | null
  }
  label: {
    type: 'LabelSubscriptionPayload'
    args: Record<SubscriptionLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'Subscription'>,
      args: { where?: LabelSubscriptionWhereInput | null },
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) =>
      | Promise<prisma.LabelSubscriptionPayload | null>
      | prisma.LabelSubscriptionPayload
      | null
  }
}

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation'; args?: [] | false; alias?: string }
  | { name: 'node'; args?: [] | false; alias?: string }
  | { name: 'updatedFields'; args?: [] | false; alias?: string }
  | { name: 'previousValues'; args?: [] | false; alias?: string }

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'UserSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'UserSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'UserSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) =>
      | Promise<prisma.UserPreviousValues | null>
      | prisma.UserPreviousValues
      | null
  }
}

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id'; args?: [] | false; alias?: string }
  | { name: 'githubUserId'; args?: [] | false; alias?: string }

type UserPreviousValuesFields = 'id' | 'githubUserId'

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  githubUserId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for OrganisationSubscriptionPayload

type OrganisationSubscriptionPayloadObject =
  | OrganisationSubscriptionPayloadFields
  | { name: 'mutation'; args?: [] | false; alias?: string }
  | { name: 'node'; args?: [] | false; alias?: string }
  | { name: 'updatedFields'; args?: [] | false; alias?: string }
  | { name: 'previousValues'; args?: [] | false; alias?: string }

type OrganisationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'

export interface OrganisationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'OrganisationSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Organisation'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'OrganisationSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Organisation | null> | prisma.Organisation | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OrganisationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'OrganisationSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) =>
      | Promise<prisma.OrganisationPreviousValues | null>
      | prisma.OrganisationPreviousValues
      | null
  }
}

// Types for OrganisationPreviousValues

type OrganisationPreviousValuesObject =
  | OrganisationPreviousValuesFields
  | { name: 'id'; args?: [] | false; alias?: string }
  | { name: 'billingPlan'; args?: [] | false; alias?: string }

type OrganisationPreviousValuesFields = 'id' | 'billingPlan'

export interface OrganisationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  billingPlan: {
    type: 'BillingPlan'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'OrganisationPreviousValues'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.BillingPlan> | prisma.BillingPlan
  }
}

// Types for RepositorySubscriptionPayload

type RepositorySubscriptionPayloadObject =
  | RepositorySubscriptionPayloadFields
  | { name: 'mutation'; args?: [] | false; alias?: string }
  | { name: 'node'; args?: [] | false; alias?: string }
  | { name: 'updatedFields'; args?: [] | false; alias?: string }
  | { name: 'previousValues'; args?: [] | false; alias?: string }

type RepositorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'

export interface RepositorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'RepositorySubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Repository'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'RepositorySubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Repository | null> | prisma.Repository | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RepositoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'RepositorySubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) =>
      | Promise<prisma.RepositoryPreviousValues | null>
      | prisma.RepositoryPreviousValues
      | null
  }
}

// Types for RepositoryPreviousValues

type RepositoryPreviousValuesObject =
  | RepositoryPreviousValuesFields
  | { name: 'id'; args?: [] | false; alias?: string }
  | { name: 'name'; args?: [] | false; alias?: string }
  | { name: 'owner'; args?: [] | false; alias?: string }

type RepositoryPreviousValuesFields = 'id' | 'name' | 'owner'

export interface RepositoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}

// Types for LabelSubscriptionPayload

type LabelSubscriptionPayloadObject =
  | LabelSubscriptionPayloadFields
  | { name: 'mutation'; args?: [] | false; alias?: string }
  | { name: 'node'; args?: [] | false; alias?: string }
  | { name: 'updatedFields'; args?: [] | false; alias?: string }
  | { name: 'previousValues'; args?: [] | false; alias?: string }

type LabelSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'

export interface LabelSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<'LabelSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Label'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'LabelSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) => Promise<prisma.Label | null> | prisma.Label | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LabelPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<'LabelSubscriptionPayload'>,
      args: {},
      context: core.GetGen<'context'>,
      info?: GraphQLResolveInfo,
    ) =>
      | Promise<prisma.LabelPreviousValues | null>
      | prisma.LabelPreviousValues
      | null
  }
}

// Types for LabelPreviousValues

type LabelPreviousValuesObject =
  | LabelPreviousValuesFields
  | { name: 'id'; args?: [] | false; alias?: string }
  | { name: 'githubId'; args?: [] | false; alias?: string }
  | { name: 'name'; args?: [] | false; alias?: string }
  | { name: 'color'; args?: [] | false; alias?: string }
  | { name: 'description'; args?: [] | false; alias?: string }

type LabelPreviousValuesFields =
  | 'id'
  | 'githubId'
  | 'name'
  | 'color'
  | 'description'

export interface LabelPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  githubId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}

export interface UserWhereUniqueInput {
  id?: string | null
  githubUserId?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id'; alias?: string }
  | { name: 'githubUserId'; alias?: string }

export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  githubUserId?: string | null
  githubUserId_not?: string | null
  githubUserId_in?: string[]
  githubUserId_not_in?: string[]
  githubUserId_lt?: string | null
  githubUserId_lte?: string | null
  githubUserId_gt?: string | null
  githubUserId_gte?: string | null
  githubUserId_contains?: string | null
  githubUserId_not_contains?: string | null
  githubUserId_starts_with?: string | null
  githubUserId_not_starts_with?: string | null
  githubUserId_ends_with?: string | null
  githubUserId_not_ends_with?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id'; alias?: string }
  | { name: 'id_not'; alias?: string }
  | { name: 'id_in'; alias?: string }
  | { name: 'id_not_in'; alias?: string }
  | { name: 'id_lt'; alias?: string }
  | { name: 'id_lte'; alias?: string }
  | { name: 'id_gt'; alias?: string }
  | { name: 'id_gte'; alias?: string }
  | { name: 'id_contains'; alias?: string }
  | { name: 'id_not_contains'; alias?: string }
  | { name: 'id_starts_with'; alias?: string }
  | { name: 'id_not_starts_with'; alias?: string }
  | { name: 'id_ends_with'; alias?: string }
  | { name: 'id_not_ends_with'; alias?: string }
  | { name: 'githubUserId'; alias?: string }
  | { name: 'githubUserId_not'; alias?: string }
  | { name: 'githubUserId_in'; alias?: string }
  | { name: 'githubUserId_not_in'; alias?: string }
  | { name: 'githubUserId_lt'; alias?: string }
  | { name: 'githubUserId_lte'; alias?: string }
  | { name: 'githubUserId_gt'; alias?: string }
  | { name: 'githubUserId_gte'; alias?: string }
  | { name: 'githubUserId_contains'; alias?: string }
  | { name: 'githubUserId_not_contains'; alias?: string }
  | { name: 'githubUserId_starts_with'; alias?: string }
  | { name: 'githubUserId_not_starts_with'; alias?: string }
  | { name: 'githubUserId_ends_with'; alias?: string }
  | { name: 'githubUserId_not_ends_with'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export interface OrganisationWhereUniqueInput {
  id?: string | null
}
export type OrganisationWhereUniqueInputInputObject =
  | Extract<keyof OrganisationWhereUniqueInput, string>
  | { name: 'id'; alias?: string }

export interface OrganisationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  billingPlan?: prisma.BillingPlan | null
  billingPlan_not?: prisma.BillingPlan | null
  billingPlan_in?: prisma.BillingPlan[]
  billingPlan_not_in?: prisma.BillingPlan[]
  AND?: OrganisationWhereInput[]
  OR?: OrganisationWhereInput[]
  NOT?: OrganisationWhereInput[]
}
export type OrganisationWhereInputInputObject =
  | Extract<keyof OrganisationWhereInput, string>
  | { name: 'id'; alias?: string }
  | { name: 'id_not'; alias?: string }
  | { name: 'id_in'; alias?: string }
  | { name: 'id_not_in'; alias?: string }
  | { name: 'id_lt'; alias?: string }
  | { name: 'id_lte'; alias?: string }
  | { name: 'id_gt'; alias?: string }
  | { name: 'id_gte'; alias?: string }
  | { name: 'id_contains'; alias?: string }
  | { name: 'id_not_contains'; alias?: string }
  | { name: 'id_starts_with'; alias?: string }
  | { name: 'id_not_starts_with'; alias?: string }
  | { name: 'id_ends_with'; alias?: string }
  | { name: 'id_not_ends_with'; alias?: string }
  | { name: 'billingPlan'; alias?: string }
  | { name: 'billingPlan_not'; alias?: string }
  | { name: 'billingPlan_in'; alias?: string }
  | { name: 'billingPlan_not_in'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export interface RepositoryWhereUniqueInput {
  id?: string | null
}
export type RepositoryWhereUniqueInputInputObject =
  | Extract<keyof RepositoryWhereUniqueInput, string>
  | { name: 'id'; alias?: string }

export interface LabelWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  githubId?: string | null
  githubId_not?: string | null
  githubId_in?: string[]
  githubId_not_in?: string[]
  githubId_lt?: string | null
  githubId_lte?: string | null
  githubId_gt?: string | null
  githubId_gte?: string | null
  githubId_contains?: string | null
  githubId_not_contains?: string | null
  githubId_starts_with?: string | null
  githubId_not_starts_with?: string | null
  githubId_ends_with?: string | null
  githubId_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: LabelWhereInput[]
  OR?: LabelWhereInput[]
  NOT?: LabelWhereInput[]
}
export type LabelWhereInputInputObject =
  | Extract<keyof LabelWhereInput, string>
  | { name: 'id'; alias?: string }
  | { name: 'id_not'; alias?: string }
  | { name: 'id_in'; alias?: string }
  | { name: 'id_not_in'; alias?: string }
  | { name: 'id_lt'; alias?: string }
  | { name: 'id_lte'; alias?: string }
  | { name: 'id_gt'; alias?: string }
  | { name: 'id_gte'; alias?: string }
  | { name: 'id_contains'; alias?: string }
  | { name: 'id_not_contains'; alias?: string }
  | { name: 'id_starts_with'; alias?: string }
  | { name: 'id_not_starts_with'; alias?: string }
  | { name: 'id_ends_with'; alias?: string }
  | { name: 'id_not_ends_with'; alias?: string }
  | { name: 'githubId'; alias?: string }
  | { name: 'githubId_not'; alias?: string }
  | { name: 'githubId_in'; alias?: string }
  | { name: 'githubId_not_in'; alias?: string }
  | { name: 'githubId_lt'; alias?: string }
  | { name: 'githubId_lte'; alias?: string }
  | { name: 'githubId_gt'; alias?: string }
  | { name: 'githubId_gte'; alias?: string }
  | { name: 'githubId_contains'; alias?: string }
  | { name: 'githubId_not_contains'; alias?: string }
  | { name: 'githubId_starts_with'; alias?: string }
  | { name: 'githubId_not_starts_with'; alias?: string }
  | { name: 'githubId_ends_with'; alias?: string }
  | { name: 'githubId_not_ends_with'; alias?: string }
  | { name: 'name'; alias?: string }
  | { name: 'name_not'; alias?: string }
  | { name: 'name_in'; alias?: string }
  | { name: 'name_not_in'; alias?: string }
  | { name: 'name_lt'; alias?: string }
  | { name: 'name_lte'; alias?: string }
  | { name: 'name_gt'; alias?: string }
  | { name: 'name_gte'; alias?: string }
  | { name: 'name_contains'; alias?: string }
  | { name: 'name_not_contains'; alias?: string }
  | { name: 'name_starts_with'; alias?: string }
  | { name: 'name_not_starts_with'; alias?: string }
  | { name: 'name_ends_with'; alias?: string }
  | { name: 'name_not_ends_with'; alias?: string }
  | { name: 'color'; alias?: string }
  | { name: 'color_not'; alias?: string }
  | { name: 'color_in'; alias?: string }
  | { name: 'color_not_in'; alias?: string }
  | { name: 'color_lt'; alias?: string }
  | { name: 'color_lte'; alias?: string }
  | { name: 'color_gt'; alias?: string }
  | { name: 'color_gte'; alias?: string }
  | { name: 'color_contains'; alias?: string }
  | { name: 'color_not_contains'; alias?: string }
  | { name: 'color_starts_with'; alias?: string }
  | { name: 'color_not_starts_with'; alias?: string }
  | { name: 'color_ends_with'; alias?: string }
  | { name: 'color_not_ends_with'; alias?: string }
  | { name: 'description'; alias?: string }
  | { name: 'description_not'; alias?: string }
  | { name: 'description_in'; alias?: string }
  | { name: 'description_not_in'; alias?: string }
  | { name: 'description_lt'; alias?: string }
  | { name: 'description_lte'; alias?: string }
  | { name: 'description_gt'; alias?: string }
  | { name: 'description_gte'; alias?: string }
  | { name: 'description_contains'; alias?: string }
  | { name: 'description_not_contains'; alias?: string }
  | { name: 'description_starts_with'; alias?: string }
  | { name: 'description_not_starts_with'; alias?: string }
  | { name: 'description_ends_with'; alias?: string }
  | { name: 'description_not_ends_with'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export interface RepositoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  owner?: string | null
  owner_not?: string | null
  owner_in?: string[]
  owner_not_in?: string[]
  owner_lt?: string | null
  owner_lte?: string | null
  owner_gt?: string | null
  owner_gte?: string | null
  owner_contains?: string | null
  owner_not_contains?: string | null
  owner_starts_with?: string | null
  owner_not_starts_with?: string | null
  owner_ends_with?: string | null
  owner_not_ends_with?: string | null
  labels_every?: LabelWhereInput | null
  labels_some?: LabelWhereInput | null
  labels_none?: LabelWhereInput | null
  AND?: RepositoryWhereInput[]
  OR?: RepositoryWhereInput[]
  NOT?: RepositoryWhereInput[]
}
export type RepositoryWhereInputInputObject =
  | Extract<keyof RepositoryWhereInput, string>
  | { name: 'id'; alias?: string }
  | { name: 'id_not'; alias?: string }
  | { name: 'id_in'; alias?: string }
  | { name: 'id_not_in'; alias?: string }
  | { name: 'id_lt'; alias?: string }
  | { name: 'id_lte'; alias?: string }
  | { name: 'id_gt'; alias?: string }
  | { name: 'id_gte'; alias?: string }
  | { name: 'id_contains'; alias?: string }
  | { name: 'id_not_contains'; alias?: string }
  | { name: 'id_starts_with'; alias?: string }
  | { name: 'id_not_starts_with'; alias?: string }
  | { name: 'id_ends_with'; alias?: string }
  | { name: 'id_not_ends_with'; alias?: string }
  | { name: 'name'; alias?: string }
  | { name: 'name_not'; alias?: string }
  | { name: 'name_in'; alias?: string }
  | { name: 'name_not_in'; alias?: string }
  | { name: 'name_lt'; alias?: string }
  | { name: 'name_lte'; alias?: string }
  | { name: 'name_gt'; alias?: string }
  | { name: 'name_gte'; alias?: string }
  | { name: 'name_contains'; alias?: string }
  | { name: 'name_not_contains'; alias?: string }
  | { name: 'name_starts_with'; alias?: string }
  | { name: 'name_not_starts_with'; alias?: string }
  | { name: 'name_ends_with'; alias?: string }
  | { name: 'name_not_ends_with'; alias?: string }
  | { name: 'owner'; alias?: string }
  | { name: 'owner_not'; alias?: string }
  | { name: 'owner_in'; alias?: string }
  | { name: 'owner_not_in'; alias?: string }
  | { name: 'owner_lt'; alias?: string }
  | { name: 'owner_lte'; alias?: string }
  | { name: 'owner_gt'; alias?: string }
  | { name: 'owner_gte'; alias?: string }
  | { name: 'owner_contains'; alias?: string }
  | { name: 'owner_not_contains'; alias?: string }
  | { name: 'owner_starts_with'; alias?: string }
  | { name: 'owner_not_starts_with'; alias?: string }
  | { name: 'owner_ends_with'; alias?: string }
  | { name: 'owner_not_ends_with'; alias?: string }
  | { name: 'labels_every'; alias?: string }
  | { name: 'labels_some'; alias?: string }
  | { name: 'labels_none'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export interface LabelWhereUniqueInput {
  id?: string | null
  githubId?: string | null
}
export type LabelWhereUniqueInputInputObject =
  | Extract<keyof LabelWhereUniqueInput, string>
  | { name: 'id'; alias?: string }
  | { name: 'githubId'; alias?: string }

export interface UserCreateInput {
  githubUserId?: string
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'githubUserId'; alias?: string }

export interface UserUpdateInput {
  githubUserId?: string | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'githubUserId'; alias?: string }

export interface UserUpdateManyMutationInput {
  githubUserId?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'githubUserId'; alias?: string }

export interface OrganisationCreateInput {
  billingPlan?: prisma.BillingPlan
}
export type OrganisationCreateInputInputObject =
  | Extract<keyof OrganisationCreateInput, string>
  | { name: 'billingPlan'; alias?: string }

export interface OrganisationUpdateInput {
  billingPlan?: prisma.BillingPlan | null
}
export type OrganisationUpdateInputInputObject =
  | Extract<keyof OrganisationUpdateInput, string>
  | { name: 'billingPlan'; alias?: string }

export interface OrganisationUpdateManyMutationInput {
  billingPlan?: prisma.BillingPlan | null
}
export type OrganisationUpdateManyMutationInputInputObject =
  | Extract<keyof OrganisationUpdateManyMutationInput, string>
  | { name: 'billingPlan'; alias?: string }

export interface RepositoryCreateInput {
  name?: string
  owner?: string
  labels?: LabelCreateManyInput | null
}
export type RepositoryCreateInputInputObject =
  | Extract<keyof RepositoryCreateInput, string>
  | { name: 'name'; alias?: string }
  | { name: 'owner'; alias?: string }
  | { name: 'labels'; alias?: string }

export interface LabelCreateManyInput {
  create?: LabelCreateInput[]
  connect?: LabelWhereUniqueInput[]
}
export type LabelCreateManyInputInputObject =
  | Extract<keyof LabelCreateManyInput, string>
  | { name: 'create'; alias?: string }
  | { name: 'connect'; alias?: string }

export interface LabelCreateInput {
  githubId?: string
  name?: string
  color?: string
  description?: string | null
}
export type LabelCreateInputInputObject =
  | Extract<keyof LabelCreateInput, string>
  | { name: 'githubId'; alias?: string }
  | { name: 'name'; alias?: string }
  | { name: 'color'; alias?: string }
  | { name: 'description'; alias?: string }

export interface RepositoryUpdateInput {
  name?: string | null
  owner?: string | null
  labels?: LabelUpdateManyInput | null
}
export type RepositoryUpdateInputInputObject =
  | Extract<keyof RepositoryUpdateInput, string>
  | { name: 'name'; alias?: string }
  | { name: 'owner'; alias?: string }
  | { name: 'labels'; alias?: string }

export interface LabelUpdateManyInput {
  create?: LabelCreateInput[]
  update?: LabelUpdateWithWhereUniqueNestedInput[]
  upsert?: LabelUpsertWithWhereUniqueNestedInput[]
  delete?: LabelWhereUniqueInput[]
  connect?: LabelWhereUniqueInput[]
  set?: LabelWhereUniqueInput[]
  disconnect?: LabelWhereUniqueInput[]
  deleteMany?: LabelScalarWhereInput[]
  updateMany?: LabelUpdateManyWithWhereNestedInput[]
}
export type LabelUpdateManyInputInputObject =
  | Extract<keyof LabelUpdateManyInput, string>
  | { name: 'create'; alias?: string }
  | { name: 'update'; alias?: string }
  | { name: 'upsert'; alias?: string }
  | { name: 'delete'; alias?: string }
  | { name: 'connect'; alias?: string }
  | { name: 'set'; alias?: string }
  | { name: 'disconnect'; alias?: string }
  | { name: 'deleteMany'; alias?: string }
  | { name: 'updateMany'; alias?: string }

export interface LabelUpdateWithWhereUniqueNestedInput {
  where?: LabelWhereUniqueInput
  data?: LabelUpdateDataInput
}
export type LabelUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof LabelUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where'; alias?: string }
  | { name: 'data'; alias?: string }

export interface LabelUpdateDataInput {
  githubId?: string | null
  name?: string | null
  color?: string | null
  description?: string | null
}
export type LabelUpdateDataInputInputObject =
  | Extract<keyof LabelUpdateDataInput, string>
  | { name: 'githubId'; alias?: string }
  | { name: 'name'; alias?: string }
  | { name: 'color'; alias?: string }
  | { name: 'description'; alias?: string }

export interface LabelUpsertWithWhereUniqueNestedInput {
  where?: LabelWhereUniqueInput
  update?: LabelUpdateDataInput
  create?: LabelCreateInput
}
export type LabelUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof LabelUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where'; alias?: string }
  | { name: 'update'; alias?: string }
  | { name: 'create'; alias?: string }

export interface LabelScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  githubId?: string | null
  githubId_not?: string | null
  githubId_in?: string[]
  githubId_not_in?: string[]
  githubId_lt?: string | null
  githubId_lte?: string | null
  githubId_gt?: string | null
  githubId_gte?: string | null
  githubId_contains?: string | null
  githubId_not_contains?: string | null
  githubId_starts_with?: string | null
  githubId_not_starts_with?: string | null
  githubId_ends_with?: string | null
  githubId_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: LabelScalarWhereInput[]
  OR?: LabelScalarWhereInput[]
  NOT?: LabelScalarWhereInput[]
}
export type LabelScalarWhereInputInputObject =
  | Extract<keyof LabelScalarWhereInput, string>
  | { name: 'id'; alias?: string }
  | { name: 'id_not'; alias?: string }
  | { name: 'id_in'; alias?: string }
  | { name: 'id_not_in'; alias?: string }
  | { name: 'id_lt'; alias?: string }
  | { name: 'id_lte'; alias?: string }
  | { name: 'id_gt'; alias?: string }
  | { name: 'id_gte'; alias?: string }
  | { name: 'id_contains'; alias?: string }
  | { name: 'id_not_contains'; alias?: string }
  | { name: 'id_starts_with'; alias?: string }
  | { name: 'id_not_starts_with'; alias?: string }
  | { name: 'id_ends_with'; alias?: string }
  | { name: 'id_not_ends_with'; alias?: string }
  | { name: 'githubId'; alias?: string }
  | { name: 'githubId_not'; alias?: string }
  | { name: 'githubId_in'; alias?: string }
  | { name: 'githubId_not_in'; alias?: string }
  | { name: 'githubId_lt'; alias?: string }
  | { name: 'githubId_lte'; alias?: string }
  | { name: 'githubId_gt'; alias?: string }
  | { name: 'githubId_gte'; alias?: string }
  | { name: 'githubId_contains'; alias?: string }
  | { name: 'githubId_not_contains'; alias?: string }
  | { name: 'githubId_starts_with'; alias?: string }
  | { name: 'githubId_not_starts_with'; alias?: string }
  | { name: 'githubId_ends_with'; alias?: string }
  | { name: 'githubId_not_ends_with'; alias?: string }
  | { name: 'name'; alias?: string }
  | { name: 'name_not'; alias?: string }
  | { name: 'name_in'; alias?: string }
  | { name: 'name_not_in'; alias?: string }
  | { name: 'name_lt'; alias?: string }
  | { name: 'name_lte'; alias?: string }
  | { name: 'name_gt'; alias?: string }
  | { name: 'name_gte'; alias?: string }
  | { name: 'name_contains'; alias?: string }
  | { name: 'name_not_contains'; alias?: string }
  | { name: 'name_starts_with'; alias?: string }
  | { name: 'name_not_starts_with'; alias?: string }
  | { name: 'name_ends_with'; alias?: string }
  | { name: 'name_not_ends_with'; alias?: string }
  | { name: 'color'; alias?: string }
  | { name: 'color_not'; alias?: string }
  | { name: 'color_in'; alias?: string }
  | { name: 'color_not_in'; alias?: string }
  | { name: 'color_lt'; alias?: string }
  | { name: 'color_lte'; alias?: string }
  | { name: 'color_gt'; alias?: string }
  | { name: 'color_gte'; alias?: string }
  | { name: 'color_contains'; alias?: string }
  | { name: 'color_not_contains'; alias?: string }
  | { name: 'color_starts_with'; alias?: string }
  | { name: 'color_not_starts_with'; alias?: string }
  | { name: 'color_ends_with'; alias?: string }
  | { name: 'color_not_ends_with'; alias?: string }
  | { name: 'description'; alias?: string }
  | { name: 'description_not'; alias?: string }
  | { name: 'description_in'; alias?: string }
  | { name: 'description_not_in'; alias?: string }
  | { name: 'description_lt'; alias?: string }
  | { name: 'description_lte'; alias?: string }
  | { name: 'description_gt'; alias?: string }
  | { name: 'description_gte'; alias?: string }
  | { name: 'description_contains'; alias?: string }
  | { name: 'description_not_contains'; alias?: string }
  | { name: 'description_starts_with'; alias?: string }
  | { name: 'description_not_starts_with'; alias?: string }
  | { name: 'description_ends_with'; alias?: string }
  | { name: 'description_not_ends_with'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export interface LabelUpdateManyWithWhereNestedInput {
  where?: LabelScalarWhereInput
  data?: LabelUpdateManyDataInput
}
export type LabelUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof LabelUpdateManyWithWhereNestedInput, string>
  | { name: 'where'; alias?: string }
  | { name: 'data'; alias?: string }

export interface LabelUpdateManyDataInput {
  githubId?: string | null
  name?: string | null
  color?: string | null
  description?: string | null
}
export type LabelUpdateManyDataInputInputObject =
  | Extract<keyof LabelUpdateManyDataInput, string>
  | { name: 'githubId'; alias?: string }
  | { name: 'name'; alias?: string }
  | { name: 'color'; alias?: string }
  | { name: 'description'; alias?: string }

export interface RepositoryUpdateManyMutationInput {
  name?: string | null
  owner?: string | null
}
export type RepositoryUpdateManyMutationInputInputObject =
  | Extract<keyof RepositoryUpdateManyMutationInput, string>
  | { name: 'name'; alias?: string }
  | { name: 'owner'; alias?: string }

export interface LabelUpdateInput {
  githubId?: string | null
  name?: string | null
  color?: string | null
  description?: string | null
}
export type LabelUpdateInputInputObject =
  | Extract<keyof LabelUpdateInput, string>
  | { name: 'githubId'; alias?: string }
  | { name: 'name'; alias?: string }
  | { name: 'color'; alias?: string }
  | { name: 'description'; alias?: string }

export interface LabelUpdateManyMutationInput {
  githubId?: string | null
  name?: string | null
  color?: string | null
  description?: string | null
}
export type LabelUpdateManyMutationInputInputObject =
  | Extract<keyof LabelUpdateManyMutationInput, string>
  | { name: 'githubId'; alias?: string }
  | { name: 'name'; alias?: string }
  | { name: 'color'; alias?: string }
  | { name: 'description'; alias?: string }

export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in'; alias?: string }
  | { name: 'updatedFields_contains'; alias?: string }
  | { name: 'updatedFields_contains_every'; alias?: string }
  | { name: 'updatedFields_contains_some'; alias?: string }
  | { name: 'node'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export interface OrganisationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OrganisationWhereInput | null
  AND?: OrganisationSubscriptionWhereInput[]
  OR?: OrganisationSubscriptionWhereInput[]
  NOT?: OrganisationSubscriptionWhereInput[]
}
export type OrganisationSubscriptionWhereInputInputObject =
  | Extract<keyof OrganisationSubscriptionWhereInput, string>
  | { name: 'mutation_in'; alias?: string }
  | { name: 'updatedFields_contains'; alias?: string }
  | { name: 'updatedFields_contains_every'; alias?: string }
  | { name: 'updatedFields_contains_some'; alias?: string }
  | { name: 'node'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export interface RepositorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RepositoryWhereInput | null
  AND?: RepositorySubscriptionWhereInput[]
  OR?: RepositorySubscriptionWhereInput[]
  NOT?: RepositorySubscriptionWhereInput[]
}
export type RepositorySubscriptionWhereInputInputObject =
  | Extract<keyof RepositorySubscriptionWhereInput, string>
  | { name: 'mutation_in'; alias?: string }
  | { name: 'updatedFields_contains'; alias?: string }
  | { name: 'updatedFields_contains_every'; alias?: string }
  | { name: 'updatedFields_contains_some'; alias?: string }
  | { name: 'node'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export interface LabelSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LabelWhereInput | null
  AND?: LabelSubscriptionWhereInput[]
  OR?: LabelSubscriptionWhereInput[]
  NOT?: LabelSubscriptionWhereInput[]
}
export type LabelSubscriptionWhereInputInputObject =
  | Extract<keyof LabelSubscriptionWhereInput, string>
  | { name: 'mutation_in'; alias?: string }
  | { name: 'updatedFields_contains'; alias?: string }
  | { name: 'updatedFields_contains_every'; alias?: string }
  | { name: 'updatedFields_contains_some'; alias?: string }
  | { name: 'node'; alias?: string }
  | { name: 'AND'; alias?: string }
  | { name: 'OR'; alias?: string }
  | { name: 'NOT'; alias?: string }

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'githubUserId_ASC'
  | 'githubUserId_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type BillingPlanValues =
  | 'OSS'
  | 'PERSONAL'
  | 'ORGANISATION_STARTER'
  | 'ORGANISATION_MEDIUM'
  | 'ORGANISATION_LARGE'

export type OrganisationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'billingPlan_ASC'
  | 'billingPlan_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type LabelOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'githubId_ASC'
  | 'githubId_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'color_ASC'
  | 'color_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RepositoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'owner_ASC'
  | 'owner_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type MutationTypeValues = 'CREATED' | 'UPDATED' | 'DELETED'
